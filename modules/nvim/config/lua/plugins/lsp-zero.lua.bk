local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    -- vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    local opts = { noremap = true, silent = true }
    local bufopts = { noremap = true, silent = true, buffer = bufnr }

    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
    vim.keymap.set('n', 'gt', vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set('n', 'gl', vim.diagnostic.open_float, opts)
    vim.keymap.set('n', '<F2>', vim.lsp.buf.rename, bufopts)
    vim.keymap.set('n', '<F3>', vim.lsp.buf.format, bufopts)
    -- vim.keymap.set('n', '<space>K', vim.lsp.buf.signature_help, bufopts)
    -- vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
    -- vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
    -- vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
    vim.keymap.set('n', '[', vim.diagnostic.goto_prev, opts)
    vim.keymap.set('n', ']', vim.diagnostic.goto_next, opts)

    print(client.name .. ': Hello there.')
end

return {
  'VonHeikemen/lsp-zero.nvim',
  branch = 'v2.x',
  lazy = false,
  dependencies = {
    {'neovim/nvim-lspconfig'},
    {'hrsh7th/nvim-cmp'},
    {'hrsh7th/cmp-nvim-lsp'},
    {'L3MON4D3/LuaSnip'},
  },
  config = function()
    local lsp = require('lsp-zero').extend_lspconfig({
      set_lsp_keymaps = false,
      -- on_attach = on_attach,
    })

    -- diagnostics
    -- lsp.set_sign_icons()
    -- vim.diagnostic.config(lsp.defaults.diagnostics({}))
    
    -- autocompletion
    local cmp = require('cmp')
    local cmp_config = require('lsp-zero').defaults.cmp_config({})
    cmp.setup(cmp_config)

    -- language servers
    local lspconfig = require('lspconfig')

    -- lspconfig.pyright.setup()
    -- lspconfig.clangd.setup()
  end,
}
